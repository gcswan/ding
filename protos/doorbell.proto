// gRPC service definition for doorbell functionality
// Handles QR code scanning, notifications, and session initiation

syntax = "proto3";

package ding.doorbell;

// TODO: Integrate with push notification services (FCM, APNs)
// TODO: Add user authentication and authorization
// TODO: Implement rate limiting for scan requests
// TODO: Add analytics and logging capabilities

service DoorbellService {
  // Called when someone scans a QR code
  rpc ScanQRCode(ScanRequest) returns (ScanResponse);

  // Stream for receiving real-time notifications
  rpc NotificationStream(NotificationRequest) returns (stream Notification);

  // Owner responds to a ding (accept/reject)
  rpc RespondToDing(DingResponse) returns (ResponseResult);

  // TODO: Add services for:
  // - QR code generation and management
  // - User profile management
  // - Door owner settings and preferences
}

// Request when QR code is scanned
message ScanRequest {
  string qr_code_id = 1;           // Unique QR code identifier
  string scanner_device_id = 2;    // Device ID of the scanner
  string scanner_location = 3;     // Optional location data
  int64 timestamp = 4;             // Scan timestamp

  // TODO: Add scanner profile info (name, phone, etc.)
  // TODO: Consider adding photo/video of scanner for security
}

// Response to QR code scan
message ScanResponse {
  bool success = 1;
  string message = 2;
  string session_id = 3;           // Session ID for potential video chat
  string door_owner_id = 4;        // ID of the door owner

  // TODO: Add estimated response time
  // TODO: Include door owner's custom message/greeting
}

// Notification sent to door owner
message Notification {
  string notification_id = 1;
  string door_owner_id = 2;
  string scanner_device_id = 3;
  NotificationType type = 4;
  string message = 5;
  int64 timestamp = 6;
  string session_id = 7;           // For linking to video chat

  // TODO: Add rich notification content (images, custom sounds)
  // TODO: Include scanner location and device info
}

// Door owner's response to a ding
message DingResponse {
  string session_id = 1;
  string door_owner_id = 2;
  ResponseType response_type = 3;
  string custom_message = 4;       // Optional custom response

  // TODO: Add predefined response templates
  // TODO: Allow scheduling of automatic responses
}

// Result of door owner's response
message ResponseResult {
  bool success = 1;
  string message = 2;
  string video_session_id = 3;     // If accepted, ID for video chat

  // TODO: Add connection details for video session
}

// Request to start receiving notifications
message NotificationRequest {
  string door_owner_id = 1;
  string device_token = 2;         // For push notifications

  // TODO: Add notification preferences and filters
}

// Types of notifications
enum NotificationType {
  DING_REQUEST = 0;               // Someone wants to talk
  DING_TIMEOUT = 1;               // No response within time limit
  DING_ACCEPTED = 2;              // Door owner accepted the ding
  DING_REJECTED = 3;              // Door owner rejected the ding
}

// Response types from door owner
enum ResponseType {
  ACCEPT = 0;                     // Accept and start video chat
  REJECT = 1;                     // Politely decline
  BUSY = 2;                       // Busy, try later
  CUSTOM = 3;                     // Custom response message
}