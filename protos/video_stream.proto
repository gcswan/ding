// gRPC service definition for video streaming between mobile devices
// This handles the core video chat functionality for the doorbell app

syntax = "proto3";

package ding.video;

// TODO: Consider adding authentication tokens to all requests
// TODO: Implement proper error handling and reconnection logic
// TODO: Add support for different video qualities/resolutions
// TODO: Consider implementing TURN/STUN for NAT traversal

service VideoStreamService {
  // Bidirectional video streaming between two clients
  // Client A (door visitor) and Client B (door owner) can exchange video/audio
  rpc VideoChat(stream VideoFrame) returns (stream VideoFrame);

  // TODO: Add separate audio streaming if needed
  // rpc AudioChat(stream AudioFrame) returns (stream AudioFrame);

  // Control messages for managing the video session
  rpc SessionControl(stream ControlMessage) returns (stream ControlMessage);
}

// Video frame data structure
message VideoFrame {
  string session_id = 1;           // Unique session identifier
  string client_id = 2;            // ID of the sending client
  bytes video_data = 3;            // Encoded video frame (H.264, VP8, etc.)
  int64 timestamp = 4;             // Frame timestamp
  FrameType frame_type = 5;        // Frame type (I-frame, P-frame, etc.)

  // TODO: Add metadata like resolution, codec info
  // TODO: Consider compression settings
}

// Control messages for session management
message ControlMessage {
  string session_id = 1;
  string client_id = 2;
  ControlType control_type = 3;
  string message = 4;              // Optional message data

  // TODO: Add more control types as needed
  // TODO: Implement heartbeat/keepalive mechanism
}

// Frame types for video encoding
enum FrameType {
  I_FRAME = 0;    // Keyframe
  P_FRAME = 1;    // Predicted frame
  B_FRAME = 2;    // Bidirectional frame
}

// Control message types
enum ControlType {
  JOIN_SESSION = 0;        // Client wants to join a session
  LEAVE_SESSION = 1;       // Client is leaving the session
  SESSION_READY = 2;       // Session is ready for streaming
  SESSION_END = 3;         // Session is ending
  HEARTBEAT = 4;           // Keepalive message
  ERROR = 5;               // Error occurred
}

// TODO: Add service for session management
// service SessionManager {
//   rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);
//   rpc JoinSession(JoinSessionRequest) returns (JoinSessionResponse);
//   rpc EndSession(EndSessionRequest) returns (EndSessionResponse);
// }
