# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import video_stream_pb2 as video__stream__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in video_stream_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class VideoStreamServiceStub(object):
    """TODO: Consider adding authentication tokens to all requests
    TODO: Implement proper error handling and reconnection logic
    TODO: Add support for different video qualities/resolutions
    TODO: Consider implementing TURN/STUN for NAT traversal

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.VideoChat = channel.stream_stream(
                '/ding.video.VideoStreamService/VideoChat',
                request_serializer=video__stream__pb2.VideoFrame.SerializeToString,
                response_deserializer=video__stream__pb2.VideoFrame.FromString,
                _registered_method=True)
        self.SessionControl = channel.stream_stream(
                '/ding.video.VideoStreamService/SessionControl',
                request_serializer=video__stream__pb2.ControlMessage.SerializeToString,
                response_deserializer=video__stream__pb2.ControlMessage.FromString,
                _registered_method=True)


class VideoStreamServiceServicer(object):
    """TODO: Consider adding authentication tokens to all requests
    TODO: Implement proper error handling and reconnection logic
    TODO: Add support for different video qualities/resolutions
    TODO: Consider implementing TURN/STUN for NAT traversal

    """

    def VideoChat(self, request_iterator, context):
        """Bidirectional video streaming between two clients
        Client A (door visitor) and Client B (door owner) can exchange video/audio
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SessionControl(self, request_iterator, context):
        """TODO: Add separate audio streaming if needed
        rpc AudioChat(stream AudioFrame) returns (stream AudioFrame);

        Control messages for managing the video session
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VideoStreamServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'VideoChat': grpc.stream_stream_rpc_method_handler(
                    servicer.VideoChat,
                    request_deserializer=video__stream__pb2.VideoFrame.FromString,
                    response_serializer=video__stream__pb2.VideoFrame.SerializeToString,
            ),
            'SessionControl': grpc.stream_stream_rpc_method_handler(
                    servicer.SessionControl,
                    request_deserializer=video__stream__pb2.ControlMessage.FromString,
                    response_serializer=video__stream__pb2.ControlMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ding.video.VideoStreamService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ding.video.VideoStreamService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class VideoStreamService(object):
    """TODO: Consider adding authentication tokens to all requests
    TODO: Implement proper error handling and reconnection logic
    TODO: Add support for different video qualities/resolutions
    TODO: Consider implementing TURN/STUN for NAT traversal

    """

    @staticmethod
    def VideoChat(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/ding.video.VideoStreamService/VideoChat',
            video__stream__pb2.VideoFrame.SerializeToString,
            video__stream__pb2.VideoFrame.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SessionControl(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/ding.video.VideoStreamService/SessionControl',
            video__stream__pb2.ControlMessage.SerializeToString,
            video__stream__pb2.ControlMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
