# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import doorbell_pb2 as doorbell__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in doorbell_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DoorbellServiceStub(object):
    """TODO: Integrate with push notification services (FCM, APNs)
    TODO: Add user authentication and authorization
    TODO: Implement rate limiting for scan requests
    TODO: Add analytics and logging capabilities

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ScanQRCode = channel.unary_unary(
                '/ding.doorbell.DoorbellService/ScanQRCode',
                request_serializer=doorbell__pb2.ScanRequest.SerializeToString,
                response_deserializer=doorbell__pb2.ScanResponse.FromString,
                _registered_method=True)
        self.NotificationStream = channel.unary_stream(
                '/ding.doorbell.DoorbellService/NotificationStream',
                request_serializer=doorbell__pb2.NotificationRequest.SerializeToString,
                response_deserializer=doorbell__pb2.Notification.FromString,
                _registered_method=True)
        self.RespondToDing = channel.unary_unary(
                '/ding.doorbell.DoorbellService/RespondToDing',
                request_serializer=doorbell__pb2.DingResponse.SerializeToString,
                response_deserializer=doorbell__pb2.ResponseResult.FromString,
                _registered_method=True)


class DoorbellServiceServicer(object):
    """TODO: Integrate with push notification services (FCM, APNs)
    TODO: Add user authentication and authorization
    TODO: Implement rate limiting for scan requests
    TODO: Add analytics and logging capabilities

    """

    def ScanQRCode(self, request, context):
        """Called when someone scans a QR code
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotificationStream(self, request, context):
        """Stream for receiving real-time notifications
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RespondToDing(self, request, context):
        """Owner responds to a ding (accept/reject)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DoorbellServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ScanQRCode': grpc.unary_unary_rpc_method_handler(
                    servicer.ScanQRCode,
                    request_deserializer=doorbell__pb2.ScanRequest.FromString,
                    response_serializer=doorbell__pb2.ScanResponse.SerializeToString,
            ),
            'NotificationStream': grpc.unary_stream_rpc_method_handler(
                    servicer.NotificationStream,
                    request_deserializer=doorbell__pb2.NotificationRequest.FromString,
                    response_serializer=doorbell__pb2.Notification.SerializeToString,
            ),
            'RespondToDing': grpc.unary_unary_rpc_method_handler(
                    servicer.RespondToDing,
                    request_deserializer=doorbell__pb2.DingResponse.FromString,
                    response_serializer=doorbell__pb2.ResponseResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ding.doorbell.DoorbellService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ding.doorbell.DoorbellService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DoorbellService(object):
    """TODO: Integrate with push notification services (FCM, APNs)
    TODO: Add user authentication and authorization
    TODO: Implement rate limiting for scan requests
    TODO: Add analytics and logging capabilities

    """

    @staticmethod
    def ScanQRCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ding.doorbell.DoorbellService/ScanQRCode',
            doorbell__pb2.ScanRequest.SerializeToString,
            doorbell__pb2.ScanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NotificationStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/ding.doorbell.DoorbellService/NotificationStream',
            doorbell__pb2.NotificationRequest.SerializeToString,
            doorbell__pb2.Notification.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RespondToDing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ding.doorbell.DoorbellService/RespondToDing',
            doorbell__pb2.DingResponse.SerializeToString,
            doorbell__pb2.ResponseResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
